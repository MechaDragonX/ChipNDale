#ifndef CHIP8_HPP
#define CHIP8_HPP

#include <cstdint>
#include <random>

class Chip8 {
    private:
        const unsigned int ROM_START_ADDRESS = 0x200;                   // Address at which the contents of ROMs are loaded into memory
        const unsigned int FONTSET_START_ADDRESS = 0x050;               // Address at which the fontset is loaded into memory
        const int FONTSET_LENGTH = 80;                                  // Constant Length of Fontset in Bytes (see fonset for more details)
        const int VIDEO_WIDTH = 64;                                     // Width of Video Display
        const int VIDEO_HEIGHT = 32;                                    // Height of Video Display
        const int SPRITE_WIDTH = 8;                                     // Constant Sprite Width
        const int KEY_COUNT = 16;                                       // Number of Keys
        const int CHARACTER_LENGTH = 5;                                 // Constant Length of Characters in Bytes (see fonstset for more details)
    public:
        // CPU State Information
        uint8_t registers[16];                                          // 16 8-bit Registers
        uint8_t memory[4096];                                           // Represents each of the 4096 bytes of memory
        uint16_t index;                                                 // Index register for storing memory addresses for aperations
        uint16_t programCounter;                                        // Adress of Next Instruction
        uint16_t opcode;                                                // An encoded form of the operation and relevant data as a number
        uint16_t stack[16];                                             // Execution Stack
        uint8_t stackPointer;                                           // Pointer Into Stack
        uint8_t delayTimer;                                             // Controls Timing of CPU Cycles
        
        // I/O State Information
        uint8_t soundTimer;                                             // Controls Timing of Sound
        uint8_t keypad[16];                                             // The CHIP-8 has 16 Input Keys which are represented by 0x0 to 0xF
        uint32_t video[2048];                                           // Video memory for a display 64 pixels wide * 32 pixels tall
        uint8_t fontset[80] = {                                         // 80 bytes that represents all the chracters the screen can display
            0xF0, 0x90, 0x90, 0x90, 0xF0,                                   // 0
            0x20, 0x60, 0x20, 0x20, 0x70,                                   // 1
            0xF0, 0x10, 0xF0, 0x80, 0xF0,                                   // 2
            0xF0, 0x10, 0xF0, 0x10, 0xF0,                                   // 3
            0x90, 0x90, 0xF0, 0x10, 0x10,                                   // 4
            0xF0, 0x80, 0xF0, 0x10, 0xF0,                                   // 5
            0xF0, 0x80, 0xF0, 0x90, 0xF0,                                   // 6
            0xF0, 0x10, 0x20, 0x40, 0x40,                                   // 7
            0xF0, 0x90, 0xF0, 0x90, 0xF0,                                   // 8
            0xF0, 0x90, 0xF0, 0x10, 0xF0,                                   // 9
            0xF0, 0x90, 0xF0, 0x90, 0x90,                                   // A
            0xE0, 0x90, 0xE0, 0x90, 0xE0,                                   // B
            0xF0, 0x80, 0x80, 0x80, 0xF0,                                   // C
            0xE0, 0x90, 0x90, 0x90, 0xE0,                                   // D
            0xF0, 0x80, 0xF0, 0x80, 0xF0,                                   // E
            0xF0, 0x80, 0xF0, 0x80, 0x80                                    // F
        };

        // Random Number Generation
        std::default_random_engine randomGenerator;                     // Random Number Generator
        std::uniform_int_distribution<uint8_t> randomByte;              // Random Byte Generated by RNG

        Chip8();                                                        // Initialize the CHIP-8
        void loadROM(const char* path);                             // Loads a ROM into memoery at the START_ADDRESS
        void cycle();                                                   // Fetch, Decode, and Execute Each Instruction

        // CPU Instructions

        void op_NULL();                                                 // Dummy Function
        void op_00E0();                                                 // CLS - Clear Display
        void op_00EE();                                                 // RET - Return from Subroutine
        void op_1nnn();                                                 // JP <address> - Jump to Location nnn
        void op_2nnn();                                                 // CALL <address> - Call Subroutine at nnn
        void op_3xkk();                                                 // SE Vx, <byte> - Skip Next Instruction if Vx = kk
        void op_4xkk();                                                 // SNE Vx, <byte> - Skip Next instruction if Vx != kk
        void op_5xy0();                                                 // SE Vx, Vy - Skip Next Instruction if Vx = Vy
        void op_6xkk();                                                 // LD Vx, <byte> - Set Vx = kk
        void op_7xkk();                                                 // ADD Vx, <byte> - Vx += kk
        void op_8xy0();                                                 // LD Vx, Vy - Set Vx = Vy
        void op_8xy1();                                                 // OR Vx, Vy - Set Vx |= Vy
        void op_8xy2();                                                 // AND Vx, Vy - Set Vx &= Vy
        void op_8xy3();                                                 // XOR Vx, Vy - Set Vx ^= Vy
        void op_8xy4();                                                 // ADD Vx, Vy - Set Vx += Vy, Set VF = Carry
        void op_8xy5();                                                 // SUB Vx, Vy - Set Vx -= Vy, Set VF = Not borrow
        void op_8xy6();                                                 // SHR Vx - Set Vx >>= 1
        void op_8xy7();                                                 // SUBN Vx, Vy - Set Vx = Vy - Vx, Set VF - Not Borrow
        void op_8xyE();                                                 // SHL Vx (), Vy) - Set Vx <<= 1
        void op_9xy0();                                                 // SNE Vx, Vy - Skip Next Instruction if Vx != Vy
        void op_Annn();                                                 // LD I, <address> - Set I = nnn
        void op_Bnnn();                                                 // JP V0, <address> - Jump to Location nnn + V0
        void op_Cxkk();                                                 // RND Vx, <byte> - Set Vx = <random byte> & kk
        void op_Dxyn();                                                 // DRW Vx, Vy, <nibble> - Display n-byte sprite starting at memory Location I at (Vx, Vy), Set VF = Collision
        void op_Ex9E();                                                 // SKP Vx - Skip next instruction if key of value Vx is pressed
        void op_ExA1();                                                 // SKNP Vx - Skip next instruction if key of value Vx is not pressed
        void op_Fx07();                                                 // LD Vx, DT - Set Vx = <Delay Time Value>
        void op_Fx0A();                                                 // LD Vx, L - Wait for key press, store value of key in Vx
        void op_Fx15();                                                 // LD DT, Vx - Set Delay Timer to Vx
        void op_Fx18();                                                 // LD ST, Vx - Set Sound Timer to Vx
        void op_Fx1E();                                                 // ADD I, Vx - Set I += Vx
        void op_Fx29();                                                 // LD F, Vx - Set I to Locaiton of Sprite for Digit Vx
        void op_Fx33();                                                 // LD B, Vx - Store binary coded decimal representation of Vx in memory location I, I+1, I+2
        void op_Fx55();                                                 // LD [I], Vx - Store registers V0 to Vx in memeory strating at memory location I
        void op_Fx65();                                                 // LD Vx, [I] - Read registers V0 to Vx from memory strating at memory location I

        // Function Table Wrapper Functions

        void functionTableWrapper0();                                   // Wraper Function for All Instruction Functions that Start with 0
        void functionTableWrapper8();                                   // Wraper Function for All Instruction Functions that Start with 8
        void functionTableWrapperE();                                   // Wraper Function for All Instruction Functions that Start with E
        void functionTableWrapperF();                                   // Wraper Function for All Instruction Functions that Start with F

        // Function Tables
        typedef void (Chip8::*Chip8Function)();                         // Type for a CPU Instruction Function
        Chip8Function functionTable[0x0F + 1] { &Chip8::op_NULL };      // Primary Function Table for CPU Inustructions
        Chip8Function functionTable0[0x0E + 1] { &Chip8::op_NULL };     // Function Table for CPU Instructions That Start With 0
        Chip8Function functionTable8[0x0E + 1] { &Chip8::op_NULL };     // Function Table for CPU Instructions That Start With 8
        Chip8Function functionTableE[0x0E + 1] { &Chip8::op_NULL };     // Function Table for CPU Instructions That Start With E
        Chip8Function functionTableF[0x65 + 1] { &Chip8::op_NULL };     // Function Table for CPU Instructions That Start With F
};

#endif
